module UVMHS.Lib.Logging where

import UVMHS.Core
import UVMHS.Lib.Pretty

newtype LogLevel = LogLevel { unLogLevel ‚à∑ ‚Ñï64 }
  deriving (Eq,Ord,Show,Pretty)

newtype LogDepth = LogDepth { unLogDepth ‚à∑ ‚Ñï64 }
  deriving (Eq,Ord,Show,Pretty)

data LogOptions = LogOptions
  { logOptionsLevel ‚à∑ ‚Ñï64
  , logOptionsDepth ‚à∑ ‚Ñï64
  , logOptionsShowLevel ‚à∑ ùîπ
  } deriving (Eq,Ord,Show)
makeLenses ''LogOptions

logOptions‚ÇÄ ‚à∑ LogOptions
logOptions‚ÇÄ = LogOptions 0 0 False

pplog ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogOptions) ‚áí ‚Ñï64 ‚Üí (() ‚Üí Doc) ‚Üí m ()
pplog l msg = do
  ll ‚Üê askL $ logOptionsLevelL ‚äö hasLens
  b ‚Üê askL $ logOptionsShowLevelL ‚äö hasLens
  when (l ‚â§ ll) $ \ () ‚Üí io $ do
    pprint $ concat
      [ if not b then null else concat
          [ ppBG grayDark $ ppFG white $ ppString $ concat ["‚ñ∑",showùïä l,"‚óÅ"]
          , ppSpace 1
          ]
      , ppGA $ msg ()
      ]
    oflush

pplogd ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogOptions) ‚áí ‚Ñï64 ‚Üí (() ‚Üí Doc) ‚Üí m ()
pplogd l msg = do
  ld ‚Üê askL $ logOptionsDepthL ‚äö hasLens
  pplog l $ \ () ‚Üí ppSpace (ld √ó ùïü64 2) ‚ß∫ ppGA (msg ())

pplogdIndent ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogOptions) ‚áí m a ‚Üí m a
pplogdIndent = mapEnvL (logOptionsDepthL ‚äö hasLens) succ

pplogdIndentReset ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogOptions) ‚áí m a ‚Üí m a
pplogdIndentReset = localL (logOptionsDepthL ‚äö hasLens) zero

whenLogLevel ‚à∑ (Monad m,MonadReader r m,HasLens r LogOptions) ‚áí ‚Ñï64 ‚Üí (() ‚Üí m ()) ‚Üí m ()
whenLogLevel l f = do
  ll ‚Üê askL $ logOptionsLevelL ‚äö hasLens
  when (l ‚â§ ll) f

